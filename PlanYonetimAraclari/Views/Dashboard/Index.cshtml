@model PlanYonetimAraclari.Models.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard - Plan345";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Main Content -->
<div class="p-6">
    @Html.AntiForgeryToken()
    <div class="mb-8">
        <h1 class="text-2xl font-bold text-gray-900">Hoşgeldin, @ViewData["UserFullName"]!</h1>
        <p class="text-sm text-gray-600">Projelerinizi ve görevlerinizi kolayca yönetin</p>
    </div>

    <!-- Bildirim Mesajları -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="bg-green-50 border-l-4 border-green-500 p-4 mb-6 auto-hide-message">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i class="fas fa-check-circle text-green-500"></i>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-green-700">@TempData["SuccessMessage"]</p>
                </div>
            </div>
        </div>
    }
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-6 auto-hide-message">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i class="fas fa-exclamation-circle text-red-500"></i>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-red-700">@TempData["ErrorMessage"]</p>
                </div>
            </div>
        </div>
    }

    <!-- Özet Kartları -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <!-- Aktif Projeler -->
        <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100 dashboard-card">
            <div class="flex items-center justify-between mb-4">
                <h3 class="font-semibold text-gray-900">Aktif Projeler</h3>
                <span class="h-10 w-10 flex items-center justify-center rounded-full bg-indigo-50 text-primary-500">
                    <i class="fas fa-folder-open"></i>
                </span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-3xl font-bold text-gray-900">@Model.ActiveProjectsCount</span>
                <span class="text-sm font-medium text-green-500 flex items-center">
                    <i class="fas fa-arrow-up mr-1"></i> Aktif
                </span>
            </div>
        </div>

        <!-- Tüm Projeler -->
        <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100 dashboard-card">
            <div class="flex items-center justify-between mb-4">
                <h3 class="font-semibold text-gray-900">Tüm Projeler</h3>
                <span class="h-10 w-10 flex items-center justify-center rounded-full bg-amber-50 text-amber-500">
                    <i class="fas fa-clipboard-list"></i>
                </span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-3xl font-bold text-gray-900">@Model.TotalProjectsCount</span>
                <span class="text-sm font-medium text-amber-500 flex items-center">
                    <i class="fas fa-list mr-1"></i> Toplam
                </span>
            </div>
        </div>

        <!-- Tamamlanan Görevler -->
        <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100 dashboard-card">
            <div class="flex items-center justify-between mb-4">
                <h3 class="font-semibold text-gray-900">Tamamlanan</h3>
                <span class="h-10 w-10 flex items-center justify-center rounded-full bg-green-50 text-green-500">
                    <i class="fas fa-check-circle"></i>
                </span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-3xl font-bold text-gray-900">@Model.CompletedProjectsCount</span>
                <span class="text-sm font-medium text-green-500 flex items-center">
                    <i class="fas fa-check mr-1"></i> Proje
                </span>
            </div>
        </div>

        <!-- Bekleyen Görevler -->
        <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100 dashboard-card">
            <div class="flex items-center justify-between mb-4">
                <h3 class="font-semibold text-gray-900">Bekleyen</h3>
                <span class="h-10 w-10 flex items-center justify-center rounded-full bg-red-50 text-red-500">
                    <i class="fas fa-calendar-alt"></i>
                </span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-3xl font-bold text-gray-900">@Model.PendingProjectsCount</span>
                <span class="text-sm font-medium text-red-500 flex items-center">
                    <i class="fas fa-clock mr-1"></i> Proje
                </span>
            </div>
        </div>
    </div>

    <!-- Kullanıcı Limitleri Bilgisi -->
    <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100 mb-8">
        <div class="flex items-center justify-between mb-4">
            <h3 class="font-semibold text-lg text-gray-900">Hesap Limitleri</h3>
            <span class="text-gray-500 text-sm">
                <i class="fas fa-info-circle mr-1"></i> Güncel durum
            </span>
        </div>
        
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-6 mb-4">
            <!-- Proje Limiti -->
            <div class="flex items-center space-x-4">
                <div class="h-12 w-12 flex items-center justify-center rounded-full bg-blue-50 text-blue-500">
                    <i class="fas fa-project-diagram"></i>
                </div>
                <div>
                    <p class="text-sm text-gray-500">Proje oluşturma hakkınız</p>
                    <div class="flex items-center mt-1">
                        <div class="flex-1 bg-gray-200 rounded-full h-2 mr-3">
                            <div class="bg-blue-500 h-2 rounded-full" style="width: @(((float)ViewBag.OwnedProjectsCount / ViewBag.MaxProjectsAllowed) * 100)%;"></div>
                        </div>
                        <span class="text-sm font-medium text-gray-700">@ViewBag.OwnedProjectsCount / @ViewBag.MaxProjectsAllowed</span>
                    </div>
                    <p class="text-xs text-@(ViewBag.RemainingProjectsCount > 0 ? "green" : "red")-600 mt-1">
                        @if (ViewBag.RemainingProjectsCount > 0)
                        {
                            <span><i class="fas fa-check-circle mr-1"></i> @ViewBag.RemainingProjectsCount adet daha proje oluşturabilirsiniz</span>
                        }
                        else
                        {
                            <span><i class="fas fa-exclamation-circle mr-1"></i> Maksimum proje limitine ulaştınız</span>
                        }
                    </p>
                </div>
            </div>
            
            <!-- Proje Üye Limiti -->
            <div class="flex items-center space-x-4">
                <div class="h-12 w-12 flex items-center justify-center rounded-full bg-purple-50 text-purple-500">
                    <i class="fas fa-users"></i>
                </div>
                <div>
                    <p class="text-sm text-gray-500">Proje başına üye limiti</p>
                    <p class="text-lg font-medium text-gray-800">@ViewBag.MaxMembersPerProject <span class="text-sm text-gray-500">kişi</span></p>
                    <p class="text-xs text-gray-600 mt-1">
                        <i class="fas fa-info-circle mr-1"></i> Her projeye maksimum @ViewBag.MaxMembersPerProject üye ekleyebilirsiniz
                    </p>
                </div>
            </div>
        </div>
        
        <!-- Admin İletişim Bilgisi -->
        <div class="mt-2">
            <span class="text-xs text-blue-700 bg-blue-50 px-3 py-2 rounded-lg inline-flex items-center">
                <i class="fas fa-info-circle mr-1"></i> Limit değişikliği için lütfen admin ile iletişime geçin.
            </span>
        </div>
    </div>

    <!-- Projelerim ve Görevlerim -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        <!-- "Projeler" Bölümü -->
        <div class="lg:col-span-2">
            <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="font-semibold text-lg text-gray-900">Projelerim</h3>
                    <button id="create-project-btn" class="px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-lg flex items-center transition-colors duration-200">
                        <i class="fas fa-plus mr-2"></i> Yeni Proje Oluştur
                    </button>
                </div>
                
                <div id="projects-container" class="grid grid-cols-1 md:grid-cols-2 gap-4 h-[400px] overflow-y-auto custom-scrollbar">
                    <!-- Proje yok ise gösterilecek alan -->
                    @if (Model.Projects == null || Model.Projects.Count == 0)
                    {
                        <div id="no-projects-message" class="md:col-span-2 text-center py-8">
                            <div class="mb-4 text-gray-400">
                                <i class="fas fa-folder-open text-5xl"></i>
                            </div>
                            <h4 class="text-lg font-medium text-gray-700 mb-2">Henüz hiç projeniz yok</h4>
                            <p class="text-gray-500 mb-4">İlk projenizi oluşturun ve görevlerinizi yönetmeye başlayın.</p>
                            <button class="create-project-btn px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-lg inline-flex items-center transition-colors duration-200">
                                <i class="fas fa-plus mr-2"></i> Yeni Proje Oluştur
                            </button>
                        </div>
                    }
                    
                    <!-- Projeler buraya dinamik olarak eklenecek -->
                    @foreach (var project in Model.Projects)
                    {
                        <div class="project-card bg-white rounded-lg shadow-sm border border-gray-100 p-4 hover:shadow-md transition-shadow duration-200">
                            <div class="flex items-center justify-between mb-2">
                                <div class="flex items-center space-x-2 max-w-[70%]">
                                    <h4 class="font-medium text-gray-800 truncate">@project.Name</h4>
                                    @if (project.UserId != ViewBag.CurrentUserId)
                                    {
                                        <span class="px-2 py-0.5 bg-blue-50 text-blue-600 text-xs rounded-full whitespace-nowrap">Ekip Üyesi</span>
                                    }
                                </div>
                                <span class="px-2 py-1 @(project.Status == ProjectStatus.Planning ? "bg-blue-100 text-blue-800" : 
                                                       project.Status == ProjectStatus.InProgress ? "bg-amber-100 text-amber-800" : 
                                                       project.Status == ProjectStatus.Completed ? "bg-green-100 text-green-800" :
                                                       project.Status == ProjectStatus.OnHold ? "bg-gray-100 text-gray-800" :
                                                       "bg-red-100 text-red-800") text-xs rounded-full">
                                    @(project.Status == ProjectStatus.Planning ? "Planlama" : 
                                     project.Status == ProjectStatus.InProgress ? "Devam Ediyor" : 
                                     project.Status == ProjectStatus.Completed ? "Tamamlandı" :
                                     project.Status == ProjectStatus.OnHold ? "Beklemede" :
                                     "İptal Edildi")
                                </span>
                            </div>
                            <p class="text-sm text-gray-600 mb-4 line-clamp-2 break-words">@(string.IsNullOrEmpty(project.Description) ? "Açıklama yok" : project.Description)</p>
                            <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-1 text-gray-500 text-sm">
                                    <i class="fas fa-calendar-alt"></i>
                                    <span>@project.CreatedDate.ToString("dd MMMM yyyy")</span>
                                </div>
                                <div>
                                    <a href="@Url.Action("Details", "Project", new { id = project.Id })" class="text-primary-500 hover:text-primary-700 transition-colors duration-200">
                                        <i class="fas fa-arrow-right"></i>
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <!-- Hızlı Notlar Bölümü -->
        <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100 col-span-1">
            <div class="flex items-center justify-between mb-4">
                <h3 class="font-semibold text-gray-900">Hızlı Notlar</h3>
                <a href="/QuickNotes" class="text-primary-500 hover:text-primary-700 transition-colors duration-200">
                    <i class="fas fa-external-link-alt"></i>
                </a>
            </div>
            
            <div class="space-y-4">
                <div class="relative">
                    <textarea id="quickNoteInput" class="w-full px-4 py-2 text-sm text-gray-700 border border-gray-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent" rows="2" placeholder="Yeni bir not ekleyin..." maxlength="200"></textarea>
                    <span id="charCount" class="absolute left-2 bottom-2 text-xs text-gray-500">0/200</span>
                    <button id="addQuickNoteBtn" class="absolute right-2 bottom-2 p-2 text-primary-500 hover:text-primary-700">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>

                <div id="quickNotesContainer" class="space-y-4 mt-4 h-[300px] overflow-y-auto custom-scrollbar">
                    <!-- Notlar buraya dinamik olarak eklenecek -->
                </div>
            </div>
        </div>
    </div>

    <!-- Yaklaşan Görevler ve Hatırlatıcılar -->
    <div class="mb-8">
        <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
            <div class="flex items-center justify-between mb-6">
                <div class="flex items-center">
                    <h3 class="font-semibold text-gray-900 mr-2">Yaklaşan Görevler & Hatırlatıcılar</h3>
                    @* <div class="flex items-center text-xs text-gray-500">
                        <i class="fas fa-info-circle mr-1 text-blue-500"></i>
                        <span>Öncelikli ve yaklaşan hatırlatmalarınız</span>
                    </div> *@
                </div>
                <div>
                    <button id="toggleTasksBtn" class="text-gray-500 hover:text-primary-500 p-2 rounded-full">
                        <i class="fas fa-chevron-up" id="toggleTasksIcon"></i>
                    </button>
                </div>
            </div>
            
            <div id="tasksContainer" style="display: block;">
                @{
                    // Tüm hatırlatıcıları bir araya getir ve tarihe göre sırala
                    var allReminders = new List<dynamic>();
                    
                    // Görevleri ekle
                    foreach (var task in Model.AssignedTasks)
                    {
                        allReminders.Add(new 
                        {
                            Type = "Task",
                            Id = task.Id,
                            Title = task.Name,
                            Description = task.Description,
                            DueDate = task.DueDate,
                            Priority = task.Priority,
                            ProjectId = task.ProjectId,
                            ProjectName = Model.Projects.FirstOrDefault(p => p.Id == task.ProjectId)?.Name ?? "Bilinmeyen Proje"
                        });
                    }
                    
                    // Takvim notlarını ekle
                    foreach (var note in Model.UpcomingCalendarNotes)
                    {
                        allReminders.Add(new 
                        {
                            Type = "CalendarNote",
                            Id = note.Id,
                            Title = note.Title,
                            Description = note.Description,
                            DueDate = (DateTime?)note.NoteDate
                        });
                    }
                    
                    // Tarihe göre sırala
                    var sortedReminders = allReminders
                        .OrderBy(r => r.DueDate)
                        .ToList();
                }
                
                @if (sortedReminders.Any())
                {
                    <div class="space-y-4 reminders-container" style="max-height: 520px; overflow-y: auto;">
                        @foreach (var reminder in sortedReminders)
                        {
                            var dueDate = reminder.DueDate;
                            var daysUntil = dueDate != null ? (((DateTime)dueDate).Date - DateTime.Today).Days : 0;
                            var isOverdue = dueDate != null && ((DateTime)dueDate).Date < DateTime.Today;
                            var dateClass = isOverdue ? "text-red-600 font-medium" : (daysUntil == 0 ? "text-orange-600 font-medium" : "text-gray-600");
                            
                            var cardClass = reminder.Type == "Task" && (reminder.Priority == TaskPriority.High || reminder.Priority == TaskPriority.Urgent) 
                                ? "border-l-4 border-red-500" 
                                : (reminder.Type == "Task" && reminder.Priority == TaskPriority.Medium 
                                    ? "border-l-4 border-yellow-500" 
                                    : "border-l-4 border-blue-500");
                            
                            <div class="bg-white rounded-lg shadow-sm p-4 @cardClass" data-reminder-type="@reminder.Type" data-id="@reminder.Id">
                                <div class="flex justify-between">
                                    <div>
                                        <h5 class="font-medium text-gray-800 mb-1">@reminder.Title</h5>
                                        @if (reminder.Type == "Task")
                                        {
                                            <div class="flex items-center text-xs text-gray-500 mb-2">
                                                <i class="fas fa-project-diagram mr-1"></i>
                                                <span>@reminder.ProjectName</span>
                                            </div>
                                        }
                                    </div>
                                    <div class="flex items-center">
                                        @if (reminder.Type == "Task")
                                        {
                                            <span class="text-xs font-semibold px-2 py-1 rounded mr-2 @(reminder.Priority == TaskPriority.High || reminder.Priority == TaskPriority.Urgent ? "bg-red-100 text-red-800" : (reminder.Priority == TaskPriority.Medium ? "bg-yellow-100 text-yellow-800" : "bg-blue-100 text-blue-800"))">
                                                @(reminder.Priority == TaskPriority.Urgent ? "Acil" : 
                                                  reminder.Priority == TaskPriority.High ? "Yüksek" : 
                                                  reminder.Priority == TaskPriority.Medium ? "Orta" : "Düşük")
                                            </span>
                                        }
                                        <span class="text-xs @dateClass whitespace-nowrap">
                                            @if (isOverdue)
                                            {
                                                <span>@Math.Abs(daysUntil) gün gecikti</span>
                                            }
                                            else if (daysUntil == 0)
                                            {
                                                <span>Bugün</span>
                                            }
                                            else if (daysUntil == 1)
                                            {
                                                <span>Yarın</span>
                                            }
                                            else
                                            {
                                                <span>@daysUntil gün sonra</span>
                                            }
                                        </span>
                                    </div>
                                </div>
                                
                                @if (!string.IsNullOrEmpty(reminder.Description))
                                {
                                    <p class="text-sm text-gray-600 mb-2 line-clamp-2">@reminder.Description</p>
                                }
                                
                                <div class="flex justify-between items-center mt-2">
                                    <div class="text-xs text-gray-500">
                                        @if (dueDate != null)
                                        {
                                            <span class="flex items-center">
                                                <i class="far fa-calendar-alt mr-1"></i> 
                                                @(reminder.Type == "CalendarNote" 
                                                    ? ((DateTime)dueDate).ToString("dd.MM.yyyy HH:mm") 
                                                    : ((DateTime)dueDate).ToString("dd.MM.yyyy"))
                                            </span>
                                        }
                                    </div>
                                    <div class="flex space-x-2">
                                        @if (reminder.Type == "CalendarNote")
                                        {
                                            <a href="/Calendar" class="text-xs px-2 py-1 bg-indigo-100 text-indigo-800 hover:bg-indigo-200 rounded-full">
                                                <i class="fas fa-eye mr-1"></i> Görüntüle
                                            </a>
                                        }
                                        else
                                        {
                                            <a href="/Project/Details/@reminder.ProjectId?taskId=@reminder.Id" class="text-xs px-2 py-1 bg-indigo-100 text-indigo-800 hover:bg-indigo-200 rounded-full">
                                                <i class="fas fa-eye mr-1"></i> Görüntüle
                                            </a>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="bg-gray-50 rounded-lg p-8 text-center">
                        <div class="text-gray-400 mb-2">
                            <i class="fas fa-inbox text-4xl"></i>
                        </div>
                        <h4 class="font-medium text-gray-700 mb-1">Hiç yaklaşan görev veya hatırlatıcı bulunamadı</h4>
                        <p class="text-sm text-gray-500">Yeni görevler oluşturarak veya takviminize notlar ekleyerek işlerinizi düzenleyebilirsiniz.</p>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <!-- Son Etkinlikler Bölümü -->
    <div class="mb-8">
        <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
            <div class="flex items-center justify-between mb-4">
                <div class="flex items-center">
                    <h3 class="font-semibold text-gray-900 mr-2">Son Etkinlikler</h3>
                    <div class="flex items-center text-xs text-gray-500">
                        <i class="fas fa-info-circle mr-1 text-blue-500"></i>
                        <span>Etkinlikler @Model.ActivityService.GetActivityRetentionDays() gün sonra otomatik silinir</span>
                    </div>
                </div>
                <div class="flex space-x-2">
                    <button id="scroll-left" class="p-2 text-gray-500 hover:text-primary-500 bg-gray-100 hover:bg-gray-200 rounded-full disabled:opacity-50 disabled:cursor-not-allowed">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <button id="scroll-right" class="p-2 text-gray-500 hover:text-primary-500 bg-gray-100 hover:bg-gray-200 rounded-full disabled:opacity-50 disabled:cursor-not-allowed">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            </div>
            
            @if (Model.RecentActivities == null || !Model.RecentActivities.Any())
            {
                <div class="text-center py-8">
                    <div class="mb-4 text-gray-400">
                        <i class="fas fa-history text-5xl"></i>
                    </div>
                    <h4 class="text-lg font-medium text-gray-700 mb-2">Henüz hiç etkinlik yok</h4>
                    <p class="text-gray-500">Etkinlikler, siz ve ekip arkadaşlarınız projelerle etkileşime girdiğinde burada görünecektir.</p>
                </div>
            }
            else
            {
                <div class="relative">
                    <!-- Etkinlikler Kaydırma Konteyneri -->
                    <div id="activity-slider" class="overflow-x-hidden">
                        <div id="activity-track" class="flex">
                            @if (Model.RecentActivities.Any())
                            {
                                foreach (var activity in Model.RecentActivities.Take(20).ToList())
                                {
                                    <div class="activity-item bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300 p-4 cursor-pointer" 
                                         data-activity-id="@activity.Id"
                                         data-activity-title="@activity.Title.Replace("\"", "&quot;")"
                                         data-activity-description="@(activity.Description?.Replace("\"", "&quot;") ?? "")"
                                         data-activity-date="@activity.CreatedAt.AddHours(-3).ToString("dd.MM.yyyy HH:mm")"
                                         data-activity-user="@(activity.User != null ? activity.User.FullName.Replace("\"", "&quot;") : "Sistem")"
                                         data-activity-type="@activity.Type"
                                         onclick="showActivityDetails(this)">
                                        <div class="flex flex-col h-full">
                                            <div class="flex items-start">
                                                <div class="@GetActivityIconClass(activity.Type) h-10 w-10 rounded-full flex items-center justify-center mr-3 flex-shrink-0">
                                                    <i class="@GetActivityIcon(activity.Type)"></i>
                                                </div>
                                                <div class="flex-1 min-w-0">
                                                    <h4 class="text-sm font-semibold text-gray-800 truncate" title="@activity.Title">@activity.Title</h4>
                                                    <p class="text-xs text-gray-500 line-clamp-2 mt-1 min-h-[32px]" title="@activity.Description">@activity.Description</p>
                                                </div>
                                            </div>
                                            <div class="flex items-center mt-auto pt-3">
                                                <p class="text-xs text-gray-400">@activity.CreatedAt.AddHours(-3).ToString("dd.MM.yyyy HH:mm")</p>
                                                <span class="text-gray-300 mx-2">•</span>
                                                <p class="text-xs text-gray-500 truncate">
                                                @if (activity.Type == ActivityType.TaskCreated || activity.Type == ActivityType.TaskUpdated || 
                                                     activity.Type == ActivityType.TaskCompleted || activity.Type == ActivityType.TaskDeleted)
                                                {
                                                    <span>Görev İşlemi: @(activity.User != null ? activity.User.FullName : "Sistem")</span>
                                                }
                                                else if (activity.Type == ActivityType.TeamMemberAdded || activity.Type == ActivityType.TeamMemberRemoved)
                                                {
                                                    <span>@(activity.User != null ? activity.User.FullName : "Sistem")</span>
                                                }
                                                else
                                                {
                                                    <span>@(activity.User != null ? activity.User.FullName : "Sistem")</span>
                                                }
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="w-full text-center py-10">
                                    <p class="text-gray-500">Henüz etkinlik kaydı bulunmuyor.</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Proje Oluşturma Modal -->
<div id="create-project-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-md">
        <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-900">Yeni Proje Oluştur</h3>
            <button id="close-modal" class="text-gray-400 hover:text-gray-500">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <form id="create-project-form" method="post" asp-controller="Dashboard" asp-action="CreateProject" onsubmit="return validateForm()">
            @Html.AntiForgeryToken()
            
            <!-- Hata Mesajı -->
            <div id="validation-error" class="bg-red-50 border-l-4 border-red-500 p-4 mb-4 hidden">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <i class="fas fa-exclamation-circle text-red-500"></i>
                    </div>
                    <div class="ml-3">
                        <p id="validation-error-message" class="text-sm text-red-700"></p>
                    </div>
                </div>
            </div>
            
            <!-- Gizli CreatedDate alanı -->
            <input type="hidden" name="CreatedDate" id="CreatedDate" value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss")" />
            
            <div class="space-y-4">
                <div>
                    <label for="Name" class="block text-sm font-medium text-gray-700 mb-1">Proje Adı *</label>
                    <input type="text" name="Name" id="Name" required maxlength="75" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500">
                </div>
                
                <div>
                    <label for="Description" class="block text-sm font-medium text-gray-700 mb-1">Açıklama</label>
                    <textarea name="Description" id="Description" rows="3" maxlength="500" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500"></textarea>
                </div>
                
                <div>
                    <label for="Status" class="block text-sm font-medium text-gray-700 mb-1">Durum *</label>
                    <select name="Status" id="Status" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500">
                        <option value="0">Planlama</option>
                        <option value="1">Devam Ediyor</option>
                        <option value="2">Tamamlandı</option>
                        <option value="3">Beklemede</option>
                        <option value="4">İptal Edildi</option>
                    </select>
                </div>
                
                <div>
                    <label for="DueDate" class="block text-sm font-medium text-gray-700 mb-1">Bitiş Tarihi (İsteğe Bağlı)</label>
                    <input type="date" name="DueDate" id="DueDate" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-primary-500 focus:border-primary-500">
                </div>
            </div>
            
            <div class="mt-6 flex justify-end space-x-3">
                <button type="button" id="cancel-project" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50">
                    İptal
                </button>
                <button type="submit" class="px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-md">
                    Oluştur
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Etkinlik Detayları Modal -->
<div id="activityDetailsModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 p-6 transform transition-all">
        <div class="flex justify-between items-start">
            <h3 id="activityTitle" class="text-lg font-semibold text-gray-900"></h3>
            <button onclick="closeActivityModal()" class="text-gray-400 hover:text-gray-600 focus:outline-none">
                <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        <div class="mt-4">
            <div class="text-sm text-gray-600 mb-4">
                <p id="activityDescription" class="whitespace-pre-line"></p>
            </div>
            <div class="flex items-center justify-between text-xs text-gray-500 mt-6 pt-4 border-t border-gray-200">
                <span id="activityDate"></span>
                <span id="activityUser"></span>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // URL'de openProjectModal=true parametresi varsa proje modalını aç
            if (new URLSearchParams(window.location.search).get('openProjectModal') === 'true') {
                $("#create-project-modal").removeClass("hidden");
                $("body").css("overflow", "hidden");
                // URL'i temizle, ama sayfa yenilenmeden
                history.replaceState(null, '', window.location.pathname);
            }
            
            // Yeni Proje Oluştur butonları
            $("#create-project-btn, .create-project-btn").on("click", function () {
                $("#create-project-modal").removeClass("hidden");
                $("body").css("overflow", "hidden"); // Arka planı kaydırmayı engelle
            });

            // Modal kapatma butonları
            $("#close-modal, #cancel-project").on("click", function () {
                $("#create-project-modal").addClass("hidden");
                $("body").css("overflow", ""); // Kaydırmayı tekrar etkinleştir
                $("#create-project-form")[0].reset(); // Formu sıfırla
            });
            
            // Modal dışına tıklandığında kapatma
            $("#create-project-modal").on("click", function(e) {
                if (e.target === this) {
                    $("#create-project-modal").addClass("hidden");
                    $("body").css("overflow", "");
                    $("#create-project-form")[0].reset();
                }
            });
            
            // ESC tuşu ile kapatma
            $(document).on("keydown", function(e) {
                if (e.key === "Escape" && !$("#create-project-modal").hasClass("hidden")) {
                    $("#create-project-modal").addClass("hidden");
                    $("body").css("overflow", "");
                    $("#create-project-form")[0].reset();
                }
            });
            
            // Form submit edildiğinde
            $("#create-project-form").on("submit", function(e) {
                if (!validateForm()) {
                    e.preventDefault();
                    return false;
                }
                
                // Form geçerli, yönlendirmeden önce bir önbellek oluştur
                let formData = {
                    name: $("#Name").val(),
                    status: $("#Status").val()
                };
                
                // Form başarıyla gönderilebilir
                localStorage.setItem('projectFormSubmitted', 'true');
                localStorage.setItem('projectFormData', JSON.stringify(formData));
                return true;
            });
            
            // Sayfa yüklendiğinde kontrol et - proje oluşturma sonrası mıyız?
            if (localStorage.getItem('projectFormSubmitted') === 'true') {
                // Yeni proje oluşturuldu, sidebar'daki projeleri yenile
                setTimeout(function() {
                    // Sayfanın tamamen yüklenmesi için biraz bekleyelim
                    if (typeof loadUserProjects === 'function') {
                        loadUserProjects();
                        console.log("Projeler yenilendi");
                    }
                    
                    // Tamamlandı bildirimi gösteriyorsak, ek mesaj ekleyebiliriz
                    if ($(".bg-green-50").length > 0) {
                        let projectData = JSON.parse(localStorage.getItem('projectFormData') || '{}');
                        console.log("Yeni proje oluşturuldu:", projectData.name);
                    }
                    
                    // Session'ı temizle
                    localStorage.removeItem('projectFormSubmitted');
                    localStorage.removeItem('projectFormData');
                }, 1000);
            }

            // Son Etkinlikler yatay kaydırma işlevselliği
            initActivitySlider();
        });

        function initActivitySlider() {
            const slider = document.getElementById('activity-slider');
            const track = document.getElementById('activity-track');
            const items = document.querySelectorAll('.activity-item');
            const leftBtn = document.getElementById('scroll-left');
            const rightBtn = document.getElementById('scroll-right');
            
            if (!slider || !track || items.length === 0 || !leftBtn || !rightBtn) return;
            
            // Her bir öğenin genişliği ve boşluk değeri
            const itemWidth = 300;
            const gap = 16;
            
            // Slider'ı tam genişlikte bırak, responsive tasarımı CSS ve overflow ile sağla
            slider.style.width = '100%';
            
            // Kaydırma pozisyonu
            let position = 0;
            // Maksimum kaydırma mesafesi: toplam içerik genişliği - görüntüleme alanı genişliği
            let maxPosition = 0;
            
            // Görünür alan genişliğini hesaplama fonksiyonu
            function calculateVisibleWidth() {
                // Görünür alan genişliği (slider genişliği)
                const visibleWidth = slider.offsetWidth;
                
                // Toplam içerik genişliği
                const totalContentWidth = items.length * (itemWidth + gap) - gap;
                
                // Maksimum kaydırma mesafesi
                maxPosition = Math.max(0, totalContentWidth - visibleWidth);
                
                // Eğer içerik slider'dan kısa ise (yani kaydırma gerekmiyorsa), düğmeleri devre dışı bırak
                if (totalContentWidth <= visibleWidth) {
                    leftBtn.disabled = true;
                    rightBtn.disabled = true;
                } else {
                    // İlk durumda sadece sağ düğmeyi etkinleştir
                    leftBtn.disabled = position === 0;
                    rightBtn.disabled = false;
                }
            }
            
            // İlk hesaplama
            calculateVisibleWidth();
            
            // Kaydırma düğmelerine tıklama olayları
            rightBtn.addEventListener('click', () => {
                // Her tıklamada bir öğe genişliği kadar kaydır, ancak maksimum pozisyonu aşma
                position = Math.min(position + itemWidth + gap, maxPosition);
                updateSliderPosition();
            });
            
            leftBtn.addEventListener('click', () => {
                // Her tıklamada bir öğe genişliği kadar geri kaydır, ancak negatif pozisyona gitme
                position = Math.max(position - (itemWidth + gap), 0);
                updateSliderPosition();
            });
            
            // Slider pozisyonunu güncelle ve düğme durumlarını ayarla
            function updateSliderPosition() {
                track.style.transform = `translateX(-${position}px)`;
                
                // Düğme durumlarını güncelle
                leftBtn.disabled = position === 0;
                rightBtn.disabled = position >= maxPosition;
            }
            
            // Pencere boyutu değiştiğinde yeniden hesapla
            window.addEventListener('resize', () => {
                // Mevcut pozisyon oranını kaydet (0-1 arası)
                const scrollRatio = maxPosition > 0 ? position / maxPosition : 0;
                
                // Yeni boyuta göre maksimum pozisyonu hesapla
                calculateVisibleWidth();
                
                // Yeni pozisyonu, önceki kaydırma oranına göre ayarla
                position = Math.min(scrollRatio * maxPosition, maxPosition);
                
                // Pozisyonu güncelle
                updateSliderPosition();
            });
        }

        function validateForm() {
            console.log("Form validation başladı");
            
            const projectName = document.getElementById('Name').value;
            const description = document.getElementById('Description').value;
            const status = document.getElementById('Status').value;
            const dueDate = document.getElementById('DueDate').value;
            
            // Form alanları değerlerini logla
            console.log("Form değerleri:", {
                projectName,
                description,
                status,
                dueDate
            });
            
            let isValid = true;
            let errorMessages = [];
            
            // Proje adı kontrolü
            if (!projectName || projectName.trim() === '') {
                errorMessages.push('Proje adı zorunludur');
                isValid = false;
                
                // Hata sınıfı ekle
                document.getElementById('Name').classList.add('border-red-500');
            } else {
                document.getElementById('Name').classList.remove('border-red-500');
            }
            
            // Status kontrolü
            if (!status && status !== '0') {
                errorMessages.push('Durum seçimi zorunludur');
                isValid = false;
                
                // Hata sınıfı ekle
                document.getElementById('Status').classList.add('border-red-500');
            } else {
                document.getElementById('Status').classList.remove('border-red-500');
            }
            
            // Gizli alanın değerini güncelle
            document.getElementById('CreatedDate').value = new Date().toISOString();
            
            // Hata varsa göster
            if (!isValid) {
                document.getElementById('validation-error').classList.remove('hidden');
                document.getElementById('validation-error-message').textContent = errorMessages.join(', ');
                return false;
            } else {
                document.getElementById('validation-error').classList.add('hidden');
            }
            
            // Form verilerini konsola yazdırarak form submit edildiğini takip edebiliriz
            console.log("Form başarıyla validate edildi, submit ediliyor...");
            return true;
        }

        // 5 saniye sonra bildirimleri gizle
        setTimeout(function() {
            document.querySelectorAll('.auto-hide-message').forEach(function(el) {
                el.style.display = 'none';
            });
        }, 5000);
    </script>

    <script>
        // Hızlı Notlar Fonksiyonları
        const quickNoteInput = document.getElementById('quickNoteInput');
        const addQuickNoteBtn = document.getElementById('addQuickNoteBtn');
        const quickNotesContainer = document.getElementById('quickNotesContainer');
        
        // Karakter sayacı
        if (quickNoteInput) {
            quickNoteInput.addEventListener('input', function() {
                const currentLength = this.value.length;
                const maxLength = this.getAttribute('maxlength');
                document.getElementById('charCount').textContent = `${currentLength}/${maxLength}`;
            });
        }

        // Not ekleme butonu tıklama olayı
        if (addQuickNoteBtn) {
            addQuickNoteBtn.addEventListener('click', () => {
                addQuickNote();
            });
        }
        
        // Enter tuşu ile not ekleme
        if (quickNoteInput) {
            quickNoteInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    addQuickNote();
                }
            });
        }

        // Not ekleme fonksiyonu
        function addQuickNote() {
            const content = quickNoteInput.value.trim();
            if (!content) return;

            // API'ye not ekleme isteği
            fetch('/api/quicknotes', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: JSON.stringify({ content: content })
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    // Başarılı ise notu UI'a ekle
                    addNoteToUI(result.data);
                    quickNoteInput.value = ''; // Input'u temizle
                    showNotification('Not başarıyla eklendi', 'success');
                } else {
                    throw new Error(result.error || 'Not eklenemedi');
                }
            })
            .catch(error => {
                console.error('Not eklenirken hata oluştu:', error);
                showNotification('Not eklenirken bir hata oluştu', 'error');
            });
        }

        // Notu UI'a ekleme fonksiyonu (yeni notlar eklerken kullanılır)
        function addNoteToUI(note) {
            const noteElement = document.createElement('div');
            noteElement.className = 'border-b border-gray-100 pb-4';
            noteElement.dataset.noteId = note.id;
            noteElement.innerHTML = `
                <div class="flex items-center space-x-3">
                    <div class="flex-shrink-0 h-8 w-8 bg-primary-100 text-primary-500 rounded-full flex items-center justify-center">
                        <i class="fas fa-sticky-note text-xs"></i>
                    </div>
                    <div class="flex-grow overflow-hidden">
                        <p class="text-sm text-gray-700 break-words line-clamp-2 overflow-hidden" style="word-break: break-word;">${note.content}</p>
                        <p class="text-xs text-gray-400 mt-1">${formatDate(note.createdAt)}</p>
                    </div>
                    <div class="flex-shrink-0">
                        <button onclick="deleteQuickNote(${note.id})" class="text-gray-400 hover:text-red-500 transition-colors duration-200">
                            <i class="fas fa-trash-alt text-xs"></i>
                        </button>
                    </div>
                </div>
            `;
            
            // Yeni notu en üste ekle
            if (quickNotesContainer.firstChild) {
                quickNotesContainer.insertBefore(noteElement, quickNotesContainer.firstChild);
            } else {
                quickNotesContainer.appendChild(noteElement);
            }
        }

        // Notları yükleme fonksiyonu
        function loadQuickNotes() {
            fetch('/api/quicknotes')
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        quickNotesContainer.innerHTML = ''; // Container'ı temizle
                        // API'den gelen notları olduğu gibi ekle (zaten yeniden eskiye sıralı)
                        result.data.forEach(note => {
                            const noteElement = document.createElement('div');
                            noteElement.className = 'border-b border-gray-100 pb-4';
                            noteElement.dataset.noteId = note.id;
                            noteElement.innerHTML = `
                                <div class="flex items-center space-x-3">
                                    <div class="flex-shrink-0 h-8 w-8 bg-primary-100 text-primary-500 rounded-full flex items-center justify-center">
                                        <i class="fas fa-sticky-note text-xs"></i>
                                    </div>
                                    <div class="flex-grow overflow-hidden">
                                        <p class="text-sm text-gray-700 break-words line-clamp-2 overflow-hidden" style="word-break: break-word;">${note.content}</p>
                                        <p class="text-xs text-gray-400 mt-1">${formatDate(note.createdAt)}</p>
                                    </div>
                                    <div class="flex-shrink-0">
                                        <button onclick="deleteQuickNote(${note.id})" class="text-gray-400 hover:text-red-500 transition-colors duration-200">
                                            <i class="fas fa-trash-alt text-xs"></i>
                                        </button>
                                    </div>
                                </div>
                            `;
                            quickNotesContainer.appendChild(noteElement);
                        });
                    } else {
                        throw new Error(result.error || 'Notlar yüklenemedi');
                    }
                })
                .catch(error => {
                    console.error('Notlar yüklenirken hata oluştu:', error);
                    quickNotesContainer.innerHTML = '<p class="text-center text-gray-500 py-4">Notlar yüklenemedi</p>';
                });
        }

        // Tarih formatlama yardımcı fonksiyonu
        function formatDate(dateString) {
            const date = new Date(dateString);
            // UTC saat farkını düzeltmek için sabit 3 saat ekle (Türkiye için)
            const adjustedDate = new Date(date.getTime());
            return adjustedDate.toLocaleString('tr-TR', { 
                day: '2-digit', 
                month: '2-digit', 
                year: 'numeric', 
                hour: '2-digit', 
                minute: '2-digit' 
            });
        }

        // Bildirim gösterme fonksiyonu
        function showNotification(message, type = 'success') {
            console.log(`Bildirim: ${message} (${type})`);
            
            const notification = document.createElement('div');
            notification.className = `fixed bottom-4 right-4 px-6 py-3 rounded-lg shadow-lg ${
                type === 'success' ? 'bg-green-500' : 'bg-red-500'
            } text-white z-50 transform transition-all duration-300 translate-y-full opacity-0`;
            
            notification.innerHTML = message;
            document.body.appendChild(notification);
            
            // Animasyon için setTimeout
            setTimeout(() => {
                notification.classList.remove('translate-y-full', 'opacity-0');
            }, 100);
            
            // 3 saniye sonra bildirimi kaldır
            setTimeout(() => {
                notification.classList.add('translate-y-full', 'opacity-0');
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }, 3000);
        }

        // Not silme fonksiyonu
        window.deleteQuickNote = function(noteId) {
            if (confirm('Bu notu silmek istediğinizden emin misiniz?')) {
                fetch(`/api/quicknotes/${noteId}`, {
                    method: 'DELETE',
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                })
                .then(response => {
                    if (response.ok) {
                        // UI'dan notu kaldır
                        const noteElement = document.querySelector(`[data-note-id="${noteId}"]`);
                        if (noteElement) {
                            noteElement.remove();
                        }
                        showNotification('Not başarıyla silindi', 'success');
                    } else {
                        throw new Error('Not silinirken bir hata oluştu');
                    }
                })
                .catch(error => {
                    console.error('Not silinirken hata oluştu:', error);
                    showNotification('Not silinirken bir hata oluştu', 'error');
                });
            }
        }

        // Sayfa yüklendiğinde notları yükle
        loadQuickNotes();
    </script>

    <style>
        /* Modern Scrollbar Tasarımı */
        .custom-scrollbar {
            scrollbar-width: thin;
            scrollbar-color: rgba(203, 213, 225, 1) transparent;
        }

        .custom-scrollbar::-webkit-scrollbar {
            width: 6px;
        }

        .custom-scrollbar::-webkit-scrollbar-track {
            background: transparent;
        }

        .custom-scrollbar::-webkit-scrollbar-thumb {
            background-color: rgba(203, 213, 225, 1);
            border-radius: 20px;
            border: transparent;
        }

        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background-color: rgba(148, 163, 184, 1);
        }

        /* Hover durumunda scrollbar'ı göster */
        .custom-scrollbar {
            scrollbar-width: none; /* Firefox için varsayılan olarak gizle */
        }

        .custom-scrollbar:hover {
            scrollbar-width: thin; /* Firefox için hover'da göster */
        }

        /* Webkit (Chrome, Safari, etc.) için hover durumunda scrollbar */
        .custom-scrollbar::-webkit-scrollbar {
            width: 0px; /* Varsayılan olarak gizle */
        }

        .custom-scrollbar:hover::-webkit-scrollbar {
            width: 6px; /* Hover'da göster */
        }

        /* Son Etkinlikler Slider Stil */
        #activity-slider {
            width: 100%;
            min-height: 150px;
            position: relative;
            overflow-x: hidden;
        }

        #activity-track {
            display: flex;
            transition: transform 0.3s ease;
        }

        .activity-item {
            height: 100%;
            min-height: 130px; /* Sabit yükseklik */
            width: 300px; /* Sabit genişlik */
            flex-shrink: 0;
            display: flex;
            flex-direction: column;
            margin-right: 16px; /* Öğeler arası boşluk için */
        }

        /* Son öğenin sağ margin'ini kaldır */
        .activity-item:last-child {
            margin-right: 0;
        }

        /* Kaydırma butonları hover efektleri */
        #scroll-left:not([disabled]):hover,
        #scroll-right:not([disabled]):hover {
            background-color: #f1f5f9;
            color: #4338ca;
        }

        /* Line Clamp için uyumluluk */
        .line-clamp-2 {
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        /* Reminders Container - Görevler ve Hatırlatıcılar için stil */
        .reminders-container {
            scrollbar-width: thin;
            transition: all 0.3s ease;
            border-radius: 0.5rem;
            padding-right: 6px;
        }
        
        /* En fazla 3 öğe gösterme (yaklaşık) - her öğe 160px */
        .reminders-container {
            max-height: 510px;
        }
    </style>

    @functions {
        string GetActivityIconClass(ActivityType type)
        {
            return type switch
            {
                ActivityType.ProjectCreated => "bg-blue-100 text-blue-500",
                ActivityType.ProjectUpdated => "bg-amber-100 text-amber-500",
                ActivityType.ProjectDeleted => "bg-red-100 text-red-500",
                ActivityType.TaskCreated => "bg-blue-100 text-blue-500",
                ActivityType.TaskUpdated => "bg-amber-100 text-amber-500",
                ActivityType.TaskCompleted => "bg-green-100 text-green-500",
                ActivityType.TaskDeleted => "bg-red-100 text-red-500",
                ActivityType.NoteCreated => "bg-purple-100 text-purple-500",
                ActivityType.NoteUpdated => "bg-amber-100 text-amber-500",
                ActivityType.NoteDeleted => "bg-red-100 text-red-500",
                ActivityType.TeamMemberAdded => "bg-indigo-100 text-indigo-500",
                ActivityType.TeamMemberRemoved => "bg-red-100 text-red-500",
                ActivityType.CalendarNoteCreated => "bg-green-100 text-green-500", 
                ActivityType.CalendarNoteUpdated => "bg-amber-100 text-amber-500",
                ActivityType.CalendarNoteDeleted => "bg-red-100 text-red-500",
                _ => "bg-gray-100 text-gray-500"
            };
        }

        string GetActivityIcon(ActivityType type)
        {
            return type switch
            {
                ActivityType.ProjectCreated => "fas fa-folder-plus",
                ActivityType.ProjectUpdated => "fas fa-folder-open",
                ActivityType.ProjectDeleted => "fas fa-folder-minus",
                ActivityType.TaskCreated => "fas fa-tasks",
                ActivityType.TaskUpdated => "fas fa-edit",
                ActivityType.TaskCompleted => "fas fa-check-double",
                ActivityType.TaskDeleted => "fas fa-trash",
                ActivityType.NoteCreated => "fas fa-sticky-note",
                ActivityType.NoteUpdated => "fas fa-pen",
                ActivityType.NoteDeleted => "fas fa-trash",
                ActivityType.TeamMemberAdded => "fas fa-user-plus",
                ActivityType.TeamMemberRemoved => "fas fa-user-minus",
                ActivityType.CalendarNoteCreated => "fas fa-calendar-plus",
                ActivityType.CalendarNoteUpdated => "fas fa-calendar-alt",
                ActivityType.CalendarNoteDeleted => "fas fa-calendar-times",
                _ => "fas fa-history"
            };
        }
    }

    <script>
        // Etkinlik detaylarını göster
        function showActivityDetails(element) {
            // Modal içeriğini ayarla
            const activityType = parseInt(element.getAttribute('data-activity-type') || '0');
            const activityTitle = element.getAttribute('data-activity-title');
            const activityDescription = element.getAttribute('data-activity-description');
            const activityDate = element.getAttribute('data-activity-date');
            const activityUser = element.getAttribute('data-activity-user');
            
            document.getElementById('activityTitle').textContent = activityTitle;
            document.getElementById('activityDescription').textContent = activityDescription;
            document.getElementById('activityDate').textContent = activityDate;
            
            // Görevi yapan kişinin görüntülenmesini özelleştir
            const userElement = document.getElementById('activityUser');
            
            // ActivityType değerlerine göre işlemi gösteren kişiyi ayarla
            // ActivityType.TaskCreated = 3, TaskUpdated = 4, TaskCompleted = 5, TaskDeleted = 6
            if (activityType >= 3 && activityType <= 6) {
                userElement.textContent = `Görev İşlemi: ${activityUser}`;
            } 
            // TeamMemberAdded = 10, TeamMemberRemoved = 11
            else if (activityType === 10 || activityType === 11) {
                userElement.textContent = activityUser;
            }
            else {
                userElement.textContent = activityUser;
            }
            
            // Modalı göster
            document.getElementById('activityDetailsModal').classList.remove('hidden');
            
            // Kapatma için ESC tuşunu dinle
            document.addEventListener('keydown', handleEscKeypress);
            
            // Arka plana tıklama ile kapatma
            document.getElementById('activityDetailsModal').addEventListener('click', function(e) {
                if (e.target === this) {
                    closeActivityModal();
                }
            });
        }
        
        // Modal kapatma fonksiyonu
        function closeActivityModal() {
            document.getElementById('activityDetailsModal').classList.add('hidden');
            document.removeEventListener('keydown', handleEscKeypress);
        }
        
        // ESC tuşu ile kapatma
        function handleEscKeypress(e) {
            if (e.key === 'Escape') {
                closeActivityModal();
            }
        }
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            initActivitySlider();
            setupProjectModal();
            setupActivityModal();
            setupUpcomingTasksAndReminders();
            
            // Tüm bildirimleri otomatik gizleme
            setTimeout(function() {
                document.querySelectorAll('.auto-hide-message').forEach(function(el) {
                    el.style.display = 'none';
                });
            }, 5000);
        });
        
        // Project Modal JavaScript
        function setupProjectModal() {
            // Proje modalı için gerekli fonksiyonlar
            console.log("Project modal setup complete");
        }
        
        // Activity Modal JavaScript
        function setupActivityModal() {
            // Etkinlik modalı için gerekli fonksiyonlar
            console.log("Activity modal setup complete");
        }
        
        // Upcoming Tasks & Reminders JavaScript
        function setupUpcomingTasksAndReminders() {
            // Toggle tasks container
            const toggleTasksBtn = document.getElementById('toggleTasksBtn');
            const toggleTasksIcon = document.getElementById('toggleTasksIcon');
            const tasksContainer = document.getElementById('tasksContainer');
            
            if (toggleTasksBtn) {
                toggleTasksBtn.addEventListener('click', function() {
                    if (tasksContainer.style.display === 'none') {
                        tasksContainer.style.display = 'block';
                        toggleTasksIcon.classList.remove('fa-chevron-down');
                        toggleTasksIcon.classList.add('fa-chevron-up');
                    } else {
                        tasksContainer.style.display = 'none';
                        toggleTasksIcon.classList.remove('fa-chevron-up');
                        toggleTasksIcon.classList.add('fa-chevron-down');
                    }
                });
            }
            
            // Apply custom scrollbar styling to reminders container
            const remindersContainer = document.querySelector('.reminders-container');
            if (remindersContainer) {
                remindersContainer.classList.add('custom-scrollbar');
            }
        }
        
        // Check if there are any reminders left, and show empty state if none
        function checkForEmptyReminders() {
            const reminderCards = document.querySelectorAll('[data-reminder-type]');
            const tasksContainer = document.getElementById('tasksContainer');
            
            console.log("Kalan hatırlatıcı sayısı: " + reminderCards.length);
            
            if (reminderCards.length === 0 && tasksContainer) {
                tasksContainer.innerHTML = `
                    <div class="bg-gray-50 rounded-lg p-8 text-center">
                        <div class="text-gray-400 mb-2">
                            <i class="fas fa-inbox text-4xl"></i>
                        </div>
                        <h4 class="font-medium text-gray-700 mb-1">Hiç yaklaşan görev veya hatırlatıcı bulunamadı</h4>
                        <p class="text-sm text-gray-500">Yeni görevler oluşturarak veya takviminize notlar ekleyerek işlerinizi düzenleyebilirsiniz.</p>
                    </div>
                `;
            }
        }
    </script>
}