@{
    ViewData["Title"] = "Hızlı Notlar - Plan345";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="p-6">
    <div class="mb-8">
        <h1 class="text-2xl font-bold text-gray-900">Hızlı Notlar</h1>
        <p class="text-sm text-gray-600">Hızlı notlarınızı yönetin</p>
    </div>

    <!-- Bildirim Mesajları -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="bg-green-50 border-l-4 border-green-500 p-4 mb-6 auto-hide-message">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i class="fas fa-check-circle text-green-500"></i>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-green-700">@TempData["SuccessMessage"]</p>
                </div>
            </div>
        </div>
    }
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-6 auto-hide-message">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i class="fas fa-exclamation-circle text-red-500"></i>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-red-700">@TempData["ErrorMessage"]</p>
                </div>
            </div>
        </div>
    }

    <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
        <div class="mb-6">
            <form id="quickNoteForm" class="flex flex-col space-y-4">
                @Html.AntiForgeryToken()
                <div>
                    <label for="noteContent" class="block text-sm font-medium text-gray-700 mb-2">Yeni Not</label>
                    <div class="relative">
                        <textarea id="noteContent" rows="3" placeholder="Not yazın..." maxlength="200"
                            class="w-full px-4 py-2 text-sm text-gray-700 border border-gray-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"></textarea>
                        <span id="charCount" class="absolute left-4 bottom-2 text-xs text-gray-500">0/200</span>
                    </div>
                </div>
                <div class="flex justify-end">
                    <button type="submit" class="px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-lg flex items-center transition-colors duration-200">
                        <i class="fas fa-plus mr-2"></i>
                        Ekle
                    </button>
                </div>
            </form>
        </div>
        
        <div id="notesList" class="space-y-4 max-h-[600px] overflow-y-auto custom-scrollbar">
            <!-- Notlar buraya dinamik olarak eklenecek -->
            <div class="text-center text-gray-500 py-4">
                <p>Yükleniyor...</p>
            </div>
        </div>
    </div>
</div>

<!-- Not Düzenleme Modal -->
<div id="editNoteModal" class="fixed inset-0 bg-black bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-6 border w-96 shadow-lg rounded-xl bg-white">
        <div class="mt-3">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Notu Düzenle</h3>
            <form id="editNoteForm">
                @Html.AntiForgeryToken()
                <input type="hidden" id="editNoteId">
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2" for="editNoteContent">
                        Not İçeriği
                    </label>
                    <div class="relative">
                        <textarea id="editNoteContent" name="content" rows="3" required maxlength="200"
                                class="w-full px-4 py-2 text-sm text-gray-700 border border-gray-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"></textarea>
                        <span id="editCharCount" class="absolute left-4 bottom-2 text-xs text-gray-500">0/200</span>
                    </div>
                </div>
                <div class="flex items-center justify-end mt-6 space-x-3">
                    <button type="button" id="closeEditModal"
                            class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 bg-white hover:bg-gray-50">
                        İptal
                    </button>
                    <button type="submit"
                            class="px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-lg">
                        Kaydet
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const API_BASE_URL = '/api/quicknotes';
            const notesList = document.getElementById('notesList');
            const quickNoteForm = document.getElementById('quickNoteForm');
            const noteContentInput = document.getElementById('noteContent');
            const editNoteContentInput = document.getElementById('editNoteContent');
            const charCount = document.getElementById('charCount');
            const editCharCount = document.getElementById('editCharCount');
            
            // Modal elements
            const editModal = document.getElementById('editNoteModal');
            const closeEditModalBtn = document.getElementById('closeEditModal');
            const editNoteForm = document.getElementById('editNoteForm');
            const editNoteId = document.getElementById('editNoteId');
            
            // Karakter sayacı işlevsellikleri
            if (noteContentInput) {
                noteContentInput.addEventListener('input', function() {
                    const currentLength = this.value.length;
                    const maxLength = this.getAttribute('maxlength');
                    charCount.textContent = `${currentLength}/${maxLength}`;
                });
            }
            
            if (editNoteContentInput) {
                editNoteContentInput.addEventListener('input', function() {
                    const currentLength = this.value.length;
                    const maxLength = this.getAttribute('maxlength');
                    editCharCount.textContent = `${currentLength}/${maxLength}`;
                });
            }
            
            // Initial load
            loadNotes();
            
            // Event Listeners
            quickNoteForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                await addNote();
            });
            
            editNoteForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                await updateNote();
            });
            
            closeEditModalBtn.addEventListener('click', () => {
                editModal.classList.add('hidden');
            });
            
            // Düzenleme butonları için event listener (olay delegasyonu ile)
            document.addEventListener('click', function(e) {
                if (e.target && (e.target.classList.contains('edit-note-btn') || e.target.closest('.edit-note-btn'))) {
                    const button = e.target.classList.contains('edit-note-btn') ? e.target : e.target.closest('.edit-note-btn');
                    const id = button.dataset.id;
                    const content = decodeURIComponent(button.dataset.content);
                    editNote(id, content);
                }
            });
            
            // Functions
            async function loadNotes() {
                try {
                    notesList.innerHTML = '<div class="text-center text-gray-500 py-4"><p>Yükleniyor...</p></div>';
                    
                    const response = await fetch(API_BASE_URL);
                    if (!response.ok) {
                        const result = await response.json();
                        throw new Error(result.error || 'Notlar alınırken bir hata oluştu');
                    }
                    
                    const result = await response.json();
                    if (!result.success) {
                        throw new Error(result.error || 'Notlar alınamadı');
                    }
                    
                    displayNotes(result.data);
                } catch (error) {
                    console.error('Error fetching notes:', error);
                    showNotification(error.message, 'error');
                    notesList.innerHTML = '<div class="text-center text-red-500 py-4"><p>Notlar yüklenirken bir hata oluştu</p></div>';
                }
            }
            
            function displayNotes(notes) {
                if (!notes || notes.length === 0) {
                    notesList.innerHTML = `
                        <div class="text-center text-gray-500 py-4">
                            <p>Henüz not eklenmemiş</p>
                        </div>
                    `;
                    return;
                }
                
                notesList.innerHTML = '';
                
                notes.forEach(note => {
                    const noteElement = document.createElement('div');
                    noteElement.className = 'bg-gray-50 p-4 rounded-lg shadow-sm border border-gray-100';
                    noteElement.innerHTML = `
                        <div class="flex items-center justify-between mb-2">
                            <div class="flex items-center space-x-3">
                                <div class="h-8 w-8 bg-primary-100 text-primary-500 rounded-full flex items-center justify-center">
                                    <i class="fas fa-sticky-note"></i>
                                </div>
                                <p class="text-xs text-gray-500">${formatDate(note.createdAt)}</p>
                            </div>
                            <div class="flex items-center space-x-2">
                                <button data-id="${note.id}" data-content="${encodeURIComponent(note.content)}" class="edit-note-btn text-gray-400 hover:text-primary-500 transition-colors">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button onclick="deleteNote(${note.id})" class="text-gray-400 hover:text-red-500 transition-colors">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>
                        </div>
                        <div class="mt-2">
                            <p class="text-sm text-gray-700 break-words" style="word-break: break-word;">${note.content}</p>
                        </div>
                    `;
                    
                    notesList.appendChild(noteElement);
                });
            }
            
            async function addNote() {
                const content = noteContentInput.value.trim();
                if (!content) {
                    showNotification('Not içeriği boş olamaz', 'error');
                    return;
                }
                
                try {
                    const response = await fetch(API_BASE_URL, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({ content })
                    });
                    
                    const result = await response.json();
                    
                    if (!response.ok) {
                        throw new Error(result.error || 'Bir hata oluştu');
                    }
                    
                    if (result.success) {
                        noteContentInput.value = '';
                        loadNotes();
                        showNotification('Not eklendi', 'success');
                    } else {
                        throw new Error(result.error || 'Not eklenemedi');
                    }
                } catch (error) {
                    console.error('Error adding note:', error);
                    showNotification(error.message, 'error');
                }
            }
            
            // Global functions for edit/delete
            window.editNote = function(id, content) {
                editNoteId.value = id;
                editNoteContentInput.value = content;
                editModal.classList.remove('hidden');
            };
            
            window.deleteNote = function(id) {
                if (confirm('Bu notu silmek istediğinizden emin misiniz?')) {
                    deleteNoteById(id);
                }
            };
            
            async function updateNote() {
                const id = editNoteId.value;
                const content = editNoteContentInput.value.trim();
                
                if (!content) {
                    showNotification('Not içeriği boş olamaz', 'error');
                    return;
                }
                
                try {
                    const response = await fetch(`${API_BASE_URL}/${id}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({ content })
                    });
                    
                    const result = await response.json();
                    
                    if (!response.ok) {
                        throw new Error(result.error || 'Bir hata oluştu');
                    }
                    
                    if (result.success) {
                        editModal.classList.add('hidden');
                        loadNotes();
                        showNotification('Not güncellendi', 'success');
                    } else {
                        throw new Error(result.error || 'Not güncellenemedi');
                    }
                } catch (error) {
                    console.error('Error updating note:', error);
                    showNotification(error.message, 'error');
                }
            }
            
            async function deleteNoteById(id) {
                try {
                    const response = await fetch(`${API_BASE_URL}/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Accept': 'application/json'
                        }
                    });
                    
                    const result = await response.json();
                    
                    if (!response.ok) {
                        throw new Error(result.error || 'Bir hata oluştu');
                    }
                    
                    if (result.success) {
                        loadNotes();
                        showNotification('Not silindi', 'success');
                    } else {
                        throw new Error(result.error || 'Not silinemedi');
                    }
                } catch (error) {
                    console.error('Error deleting note:', error);
                    showNotification(error.message, 'error');
                }
            }
            
            function formatDate(dateString) {
                try {
                    // API'den gelen tarih string'ini Date nesnesine dönüştür
                    const date = new Date(dateString);
                    
                    // Geçerli bir tarih kontrolü
                    if (isNaN(date.getTime())) {
                        return 'Geçersiz tarih';
                    }
                    
                    return date.toLocaleString('tr-TR', {
                        day: '2-digit',
                        month: '2-digit',
                        year: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                    });
                } catch (error) {
                    console.error('Tarih biçimlendirme hatası:', error);
                    return 'Tarih formatlanırken hata oluştu';
                }
            }
            
            function showNotification(message, type) {
                const notificationDiv = document.createElement('div');
                notificationDiv.className = `fixed bottom-4 right-4 px-6 py-3 rounded-lg text-white ${
                    type === 'success' ? 'bg-green-500' : 'bg-red-500'
                }`;
                notificationDiv.textContent = message;
                document.body.appendChild(notificationDiv);
                
                setTimeout(() => {
                    notificationDiv.remove();
                }, 3000);
            }
        });
    </script>
} 